# https://github.com/ellite/Wallos?tab=readme-ov-file#docker-1

--- # deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: wallos
  name: wallos
#  namespace: wallos
spec:
  selector:
    matchLabels:
      app: wallos
  revisionHistoryLimit: 0
  template:
    metadata:
      labels:
        app: wallos
    spec:
      containers:
        - name: wallos
          image: bellamy/wallos:latest
          imagePullPolicy: Always
          env:
            - name: TZ
              value: "Australia/Sydney"
          ports:
            - containerPort: 80
              name: wallos-http
              protocol: TCP
          resources:
            requests:
              cpu: 100m
              memory: 500Mi
            limits:
              cpu: "100m"
              memory: "500Mi"
          volumeMounts:
            - mountPath: /var/www/html/db
              name: wallos-db-pv
            - mountPath: /var/www/html/images/uploads/logos
              name: wallos-logos-pv
      volumes:
        - name: wallos-db-pv
          # If this is NFS backed, you may have to add the nolock mount option to the storage class
          persistentVolumeClaim:
            claimName: wallos-db-pvc
        - name: wallos-logos-pv
          # If this is NFS backed, you may have to add the nolock mount option to the storage class
          persistentVolumeClaim:
            claimName: wallos-logos-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
# If this is NFS backed, you may have to add the nolock mount option to the storage class
metadata:
  name: wallos-db-pvc
#  namespace: wallos
spec:
  storageClassName: managed-nfs-storage-retain
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: PersistentVolumeClaim
# If this is NFS backed, you may have to add the nolock mount option to the storage class
metadata:
  name: wallos-logos-pvc
#  namespace: wallos
spec:
  storageClassName: managed-nfs-storage-retain
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
---
apiVersion: v1
kind: Service
metadata:
  name: wallos-http-svc
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: wallos-http
  selector:
    app: wallos
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-dns01-prod"
    #cert-manager.io/cluster-issuer: "letsencrypt-staging"
    kubernetes.io/ingress.class: "nginx"
    gethomepage.dev/description: Open-Source Personal Subscription Tracker
    gethomepage.dev/enabled: "true"
    gethomepage.dev/group: Handy Tools
    gethomepage.dev/icon: wallos
    gethomepage.dev/name: Wallos
  name: wallos
spec:
  rules:
    - host: wallos.rockyroad.rocks
      http:
        paths:
          - backend:
              service:
                name: wallos-http-svc
                port:
                  number: 80
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - wallos.rockyroad.rocks
      secretName: wallos-tls



