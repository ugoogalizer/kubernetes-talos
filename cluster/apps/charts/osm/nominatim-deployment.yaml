
# https://github.com/mediagis/nominatim-docker/tree/master
# https://github.com/mediagis/nominatim-docker/blob/master/howto.md

--- # deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nominatim
  name: nominatim
#  namespace: nominatim
spec:
  selector:
    matchLabels:
      app: nominatim
  template:
    metadata:
      labels:
        app: nominatim
        app.kubernetes.io/name: nominatim # required for Homepage
    spec:
      containers:
        - name: nominatim
          # https://github.com/nominatim-app/nominatim/pkgs/container/nominatim 
          image: mediagis/nominatim:5.1 # as at 20251021
          imagePullPolicy: Always
          env:
            - name: TZ
              value: "Australia/Sydney"
            # can only have one of PBF_URL or PBF_PATH
            # - name: PBF_URL  # https://wiki.openstreetmap.org/wiki/Planet.osm#Planet.osm_mirrors
            #   value: "https://download.geofabrik.de/europe/monaco-latest.osm.pbf"
            - name: PBF_PATH 
              value: "/nominatim/data/new-zealand-251020.osm.pbf"
            #- name: REPLICATION_URL
            #  value: "https://download.geofabrik.de/europe/monaco-updates/"
            # - name: REPLICATION_UPDATE_INTERVAL # seconds
            #   value: "86400"
            - name: IMPORT_STYLE
              value: "full"
            - name: NOMINATIM_PASSWORD # to connect to postgres with
              valueFrom:
                secretKeyRef:
                  name: nominatim-externalsecrets
                  key: nominatim-postgres-secret
          ports:
            - containerPort: 8080
              name: nominatim-http
              protocol: TCP
            - containerPort: 5432
              name: postgres
              protocol: TCP
          resources:
            requests:
              cpu: 1000m
              memory: 1000Mi
            limits:
              cpu: "10000m"
              memory: "10000Mi"
          volumeMounts:
            - name: postgres-storage
              mountPath: /var/lib/postgresql/16/main # /var/lib/postgresql
            - name: source-storage
              mountPath: /nominatim/data
            - name: flatnode-storage
              mountPath: /nominatim/flatnode
      volumes:
        - name: postgres-storage
          persistentVolumeClaim:
            claimName: nominatim-postgres-pvc
        - name: source-storage
          persistentVolumeClaim:
            claimName: nominatim-source-pvc
        - name: flatnode-storage
          persistentVolumeClaim:
            claimName: nominatim-flatnode-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nominatim-postgres-pvc
spec:
  storageClassName: managed-nfs-storage-retain
  accessModes:
    - ReadWriteOnce 
  resources:
    requests:
      storage: 10Gi 
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nominatim-source-pvc
spec:
  storageClassName: managed-nfs-storage-retain
  accessModes:
    - ReadWriteOnce 
  resources:
    requests:
      storage: 10Gi 
---
# https://github.com/mediagis/nominatim-docker/blob/master/howto.md#flatnode-files
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: nominatim-flatnode-pvc
spec:
  storageClassName: managed-nfs-storage-retain
  accessModes:
    - ReadWriteOnce 
  resources:
    requests:
      storage: 100Gi 
---
apiVersion: v1
kind: Service
metadata:
  name: nominatim-http-svc
spec:
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: nominatim-http
  selector:
    app: nominatim
  type: ClusterIP
---
apiVersion: v1
kind: Service
metadata:
  name: postgres-svc
spec:
  ports:
    - name: postgres
      port: 5432
      protocol: TCP
      targetPort: postgres
  selector:
    app: nominatim
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  annotations:
    #acme.cert-manager.io/http01-ingress-class: nginx-external
    #kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: "letsencrypt-dns01-prod"
    #cert-manager.io/cluster-issuer: "letsencrypt-staging"
    kubernetes.io/ingress.class: "nginx"
    #acme.cert-manager.io/http01-ingress-class: "nginx-external"
    #nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    #nginx.org/ssl-services: "tvheadend-http-svc"
    nginx.org/websocket-services: "nominatim-http-svc"        
    nginx.org/proxy-read-timeout: "3600"
    nginx.org/proxy-send-timeout: "3600" 
    nginx.ingress.kubernetes.io/proxy-body-size: "100m" # allow uploads (aka backups) of up to 100MB
    gethomepage.dev/description: nominatim
    gethomepage.dev/enabled: "true"
    gethomepage.dev/group: Utils
    gethomepage.dev/icon: nominatim
    gethomepage.dev/name: nominatim

  name: nominatim
spec:
  rules:
    - host: nominatim.rockyroad.rocks
      http:
        paths:
          - backend:
              service:
                name: nominatim-http-svc
                port:
                  number: 8080
            path: /
            pathType: Prefix
  tls:
    - hosts:
        - nominatim.rockyroad.rocks
      secretName: nominatim-tls
---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: osmtools-nominatim-reset
  namespace: osm
spec:
  schedule: "0 0 31 2 *" # arbitrary schedule that never happens
  suspend: true           # prevent automatic execution
  jobTemplate:
    spec:
      template:
        spec:
          restartPolicy: Never
          containers:
          - name: db-reset
            image: postgres:16
            command: ["/bin/bash", "-c"]
            args:
              - |
                set -euo pipefail
                echo "remove nominatim docker flags to trigger recreate"
                rm /var/lib/postgresql/16/main/import-finished
                
                echo "ðŸ”„ Connecting to Postgres at ${PGHOST}..."
                echo "ðŸ”„ Terminating all active sessions on 'nominatim'..."

                psql -U "${PGUSER}" -h "${PGHOST}" -d postgres -c "
                  SELECT pg_terminate_backend(pid)
                  FROM pg_stat_activity
                  WHERE datname='nominatim' AND pid<>pg_backend_pid();
                "
                
                echo "Dropping and recreating database 'nominatim'..."

                psql -U "${PGUSER}" -h "${PGHOST}" -d postgres -c "DROP DATABASE IF EXISTS nominatim;"
                psql -U "${PGUSER}" -h "${PGHOST}" -d postgres -c "CREATE DATABASE nominatim;"

                echo "âœ… Database 'nominatim' successfully dropped and recreated."

            env:
            - name: PGUSER
              value: nominatim
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: nominatim-externalsecrets
                  key: nominatim-postgres-secret
            - name: PGHOST
              value: postgres-svc
